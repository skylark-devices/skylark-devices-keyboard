{"version":3,"sources":["Monitor.js"],"names":["define","klass","keyboard","Key","Monitor","_construct","dontInitialize","this","keys","actions","self","handlers","keydown","event","push","keyCode","DOWN","keyup","UP","focus","reset","create","update","end","length","key","shift","action","undefined","justReleased","justPressed","RESET","i","keyPressed","pressed","keyJustPressed","keyJustReleased","window","addEventListener","dispose","removeEventListener"],"mappings":";;;;;;;AAAAA,QACC,sBACA,aACA,SACC,SACDC,EACAC,EACAC,GAEA,aAWA,IAAIC,EAAUH,GACbI,WAAa,SAAUC,GAOtBC,KAAKC,QAaLD,KAAKE,WAEL,IAAIC,EAAOH,KACPE,EAAUF,KAAKE,QA2BnBF,KAAKI,UACJC,QAAY,SAASC,GACjBJ,EAAQK,KAAKD,EAAME,SACnBN,EAAQK,KAAKX,EAAIa,OAErBC,MAAU,SAASJ,GACfJ,EAAQK,KAAKD,EAAME,SACnBN,EAAQK,KAAKX,EAAIe,KAErBC,MAAU,SAASN,GACfH,EAAKU,WAMY,IAAnBd,GAEFC,KAAKc,UAWPC,OAAS,WAGR,IAFA,IAAIC,EAAM,EAEJhB,KAAKE,QAAQe,OAASD,GAC5B,CACC,IAAIE,EAAMlB,KAAKE,QAAQiB,QACnBC,EAASpB,KAAKE,QAAQiB,aAEJE,IAAnBrB,KAAKC,KAAKiB,KAEZlB,KAAKC,KAAKiB,GAAO,IAAItB,GAGtBI,KAAKC,KAAKiB,GAAKH,OAAOK,IAEnBpB,KAAKC,KAAKiB,GAAKI,cAAgBtB,KAAKC,KAAKiB,GAAKK,eAEhDvB,KAAKE,QAAQK,KAAKW,GAClBlB,KAAKE,QAAQK,KAAKX,EAAI4B,OACtBR,GAAO,KAYVH,MAAQ,WAEP,IAAI,IAAIY,EAAI,EAAGA,EAAIzB,KAAKC,KAAKgB,OAAQQ,SAEhBJ,IAAjBrB,KAAKC,KAAKwB,IAEZzB,KAAKC,KAAKwB,GAAGZ,SAWhBa,WAAa,SAASR,GACrB,YAA0BG,IAAnBrB,KAAKC,KAAKiB,IAAsBlB,KAAKC,KAAKiB,GAAKS,SASvDC,eAAiB,SAASV,GACzB,YAA0BG,IAAnBrB,KAAKC,KAAKiB,IAAsBlB,KAAKC,KAAKiB,GAAKK,aASvDM,gBAAkB,SAASX,GAC1B,YAA0BG,IAAnBrB,KAAKC,KAAKiB,IAAsBlB,KAAKC,KAAKiB,GAAKI,cASvDR,OAAS,WAER,IAAK,IAAIR,KAASN,KAAKI,SACtB0B,OAAOC,iBAAiBzB,EAAMN,KAAKI,SAASE,KAS9C0B,QAAU,WAET,IAAK,IAAI1B,KAASN,KAAKI,SACtB0B,OAAOG,oBAAoB3B,EAAMN,KAAKI,SAASE,OAOlD,OAAOX,EAASE,QAAWA","file":"../Monitor.js","sourcesContent":["define([\r\n\t\"skylark-langx-klass\",\r\n\t\"./keyboard\",\r\n\t\"./Key\"\r\n],function(\r\n\tklass,\r\n\tkeyboard,\r\n\tKey\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Keyboard instance for input in sync with the running 3D application.\r\n\t * \r\n\t * The keyboard object provided by scripts is automatically updated by the runtime handler.\r\n\t * \r\n\t * @class Keyboard\r\n\t * @module Input\r\n\t * @param {Boolean} dontInitialize If true the mouse events are not created.\r\n\t */\r\n\tvar Monitor = klass({\r\n\t\t_construct : function (dontInitialize) \t{\r\n\t\t\t/**\r\n\t\t\t * Array with keyboard keys status.\r\n\t\t\t *\r\n\t\t\t * @property keys\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.keys = [];\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * The actions array serves as a buffer for the key input actions.\r\n\t\t\t *\r\n\t\t\t * Until the update method is called it stores all the key stroke actions.\r\n\t\t\t *\r\n\t\t\t * On update the key strokes are updated and the keys array stores the correct values.\r\n\t\t\t *\r\n\t\t\t * @property actions\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.actions = [];\r\n\r\n\t\t\tvar self = this;\r\n\t\t\tvar actions = this.actions;\r\n\r\n\t\t\t/**\r\n\t\t\t * Event manager used to handle the keyup, keydown and focus events.\r\n\t\t\t *\r\n\t\t\t * On each event actions are added to the actions array.\r\n\t\t\t *\r\n\t\t\t * @property events\r\n\t\t\t * @type {EventManager}\r\n\t\t\t */\r\n\t\t\t//this.events = new EventManager();\r\n\t\t\t/*\r\n\t\t\tthis.events.add(window, \"keydown\", function(event)\r\n\t\t\t{\r\n\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\tactions.push(Key.DOWN);\r\n\t\t\t});\r\n\t\t\tthis.events.add(window, \"keyup\", function(event)\r\n\t\t\t{\r\n\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\tactions.push(Key.UP);\r\n\t\t\t});\r\n\t\t\tthis.events.add(window, \"focus\", function(event)\r\n\t\t\t{\r\n\t\t\t\tself.reset();\r\n\t\t\t});\r\n\t\t\t*/\r\n\t\t\tthis.handlers = {\r\n\t\t\t\t\"keydown\" : function(event) {\r\n\t\t\t\t\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\t\t\t\t\tactions.push(Key.DOWN);\r\n\t\t\t\t\t\t\t},\t\t\t\r\n\t\t\t\t\"keyup\" : function(event) {\r\n\t\t\t\t\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\t\t\t\t\tactions.push(Key.UP);\r\n\t\t\t\t\t\t\t},\t\t\t\r\n\t\t\t\t\"focus\" : function(event) {\r\n\t\t\t\t\t\t\t\tself.reset();\r\n\t\t\t\t\t\t\t},\t\t\t\r\n\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif(dontInitialize !== true)\r\n\t\t\t{\r\n\t\t\t\tthis.create();\r\n\t\t\t}\r\n\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update key flags synchronously.\r\n\t\t * \r\n\t\t * @method update\r\n\t\t */\r\n\t\tupdate : function() \t{\r\n\t\t\tvar end = 0;\r\n\r\n\t\t\twhile(this.actions.length > end)\r\n\t\t\t{\r\n\t\t\t\tvar key = this.actions.shift();\r\n\t\t\t\tvar action = this.actions.shift();\r\n\r\n\t\t\t\tif(this.keys[key] === undefined)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.keys[key] = new Key();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.keys[key].update(action);\r\n\r\n\t\t\t\tif(this.keys[key].justReleased || this.keys[key].justPressed)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.actions.push(key);\r\n\t\t\t\t\tthis.actions.push(Key.RESET);\r\n\t\t\t\t\tend += 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reset keyboard status to default.\r\n\t\t *\r\n\t\t * Does not clean the action list.\r\n\t\t * \r\n\t\t * @method reset\r\n\t\t */\r\n\t\treset : function() {\r\n\t\t\t//Reset all keys\r\n\t\t\tfor(var i = 0; i < this.keys.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(this.keys[i] !== undefined)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.keys[i].reset();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if a key is pressed.\r\n\t\t * \r\n\t\t * @method keyPressed\r\n\t\t * @return {boolean} True is the key is currently pressed\r\n\t\t */\r\n\t\tkeyPressed : function(key){\r\n\t\t\treturn this.keys[key] !== undefined && this.keys[key].pressed;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check is a key as just pressed.\r\n\t\t * \r\n\t\t * @method keyJustPressed\r\n\t\t * @return {boolean} True is the key was just pressed\r\n\t\t */\r\n\t\tkeyJustPressed : function(key){\r\n\t\t\treturn this.keys[key] !== undefined && this.keys[key].justPressed;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if a key was just released.\r\n\t\t * \r\n\t\t * @method keyJustReleased\r\n\t\t * @return {boolean} True is the key was just pressed\r\n\t\t */\r\n\t\tkeyJustReleased : function(key){\r\n\t\t\treturn this.keys[key] !== undefined && this.keys[key].justReleased;\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Create keyboard events.\r\n\t\t * \r\n\t\t * @method dispose\r\n\t\t */\r\n\t\tcreate : function(){\r\n\t\t\t//this.events.create();\r\n\t\t\tfor (var event in this.handlers) {\r\n\t\t\t\twindow.addEventListener(event,this.handlers[event]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Dispose keyboard events.\r\n\t\t * \r\n\t\t * @method dispose\r\n\t\t */\r\n\t\tdispose : function()\t{\r\n\t\t\t//this.events.destroy();\r\n\t\t\tfor (var event in this.handlers) {\r\n\t\t\t\twindow.removeEventListener(event,this.handlers[event]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\treturn keyboard.Monitor =  Monitor;\r\n});"]}