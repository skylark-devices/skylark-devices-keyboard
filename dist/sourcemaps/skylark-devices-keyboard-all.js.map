{"version":3,"sources":["skylark-devices-keyboard-all.js"],"names":["define","obj1","path","obj2","split","length","ns","i","name","_attach","skylark","attach","obj","main","keyboard","isShiftDown","evt","shiftKey","isAltDown","altKey","isControlDown","ctrlKey","isMetaDown","metaKey","TAB","ENTER","SHIFT","CTRL","ALT","CAPS_LOCK","ESC","SPACEBAR","PAGE_UP","PAGE_DOWN","END","HOME","INSERT","DEL","LEFT","RIGHT","UP","DOWN","NUM0","NUM1","NUM2","NUM3","NUM4","NUM5","NUM6","NUM7","NUM8","NUM9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","class2type","nativeIsArray","Array","isArray","toString","type","forEach","toLowerCase","String","call","object","constructor","isEmptyObject","isFunction","value","isHtmlNode","nodeType","isNumber","isObject","isString","isWindow","window","isArrayLike","isBoolean","isDefined","isDocument","DOCUMENT_NODE","isElement","isEmpty","isNaN","isNull","isNumeric","isPlainObject","Object","getPrototypeOf","prototype","isSameOrigin","href","origin","location","protocol","hostname","port","startsWith","isSymbol","isObjectLike","objectToString","symbolTag","isUndefined","types","INFINITY","MAX_INTEGER","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toFinite","toNumber","sign","other","valueOf","replace","isBinary","test","slice","toInteger","result","remainder","numbers","eq","deepEq","hasOwnProperty","keysFunc","defaults","SymbolProto","Symbol","allKeys","keys","key","push","has","_mixin","target","source","deep","safe","undefined","_parseMixinArgs","args","params","arguments","shift","pop","sources","mixin","apply","this","values","a","b","aStack","bStack","className","areArrays","aCtor","bCtor","clone","src","checkCloneMethod","copy","index","l","each","callback","undef","extend","arg","isEqual","includes","collection","fromIndex","guard","nativeMax","indexOf","baseIndexOf","isMatch","attrs","omit","prop1","prop2","pn","pick","removeItem","items","item","idx","splice","fallback","prop","safeMixin","objects","filter","find","baseFindIndex","array","predicate","fromRight","baseIsNaN","flatten","j","compact","first","n","func","grep","out","inArray","makeArray","offset","startWith","concat","merge","second","arr","fn","map","elements","reduce","initialValue","uniq","arrays","createClass","_constructor","_construct","init","props","parent","mixins","options","innerParent","ctor","Error","clss","unshift","superclass","cls","clsMixines","serialMixins","newCtor","xtor","Function","create","__proto__","__mixin__","mergeMixins","klassName","__mixins__","partial","proto","_super","noOverrided","overrides","superFn","tmp","overrided","ret","defineProperty","extendClass","inherit","f1","klass","Key","pressed","justPressed","justReleased","update","action","RESET","set","reset","Monitor","dontInitialize","actions","self","handlers","keydown","event","keyCode","keyup","focus","end","keyPressed","keyJustPressed","keyJustReleased","addEventListener","dispose","removeEventListener"],"mappings":"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","file":"../skylark-devices-keyboard-all.js","sourcesContent":["define('skylark-langx-ns/_attach',[],function(){\r\n    return  function attach(obj1,path,obj2) {\r\n        if (typeof path == \"string\") {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length,\r\n            ns=obj1,\r\n            i=0,\r\n            name = path[i++];\r\n\r\n        while (i < length) {\r\n            ns = ns[name] = ns[name] || {};\r\n            name = path[i++];\r\n        }\r\n\r\n        return ns[name] = obj2;\r\n    }\r\n});\ndefine('skylark-langx-ns/ns',[\r\n    \"./_attach\"\r\n], function(_attach) {\r\n    var skylark = {\r\n    \tattach : function(path,obj) {\r\n    \t\treturn _attach(skylark,path,obj);\r\n    \t}\r\n    };\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx-ns/main',[\r\n\t\"./ns\"\r\n],function(skylark){\r\n\treturn skylark;\r\n});\ndefine('skylark-langx-ns', ['skylark-langx-ns/main'], function (main) { return main; });\n\ndefine('skylark-devices-keyboard/keyboard',[\r\n\t\"skylark-langx-ns\"\r\n],function(skylark){\r\n\tvar keyboard = {};\r\n\t/**\r\n\t * Function: isShiftDown\r\n\t * \r\n\t * Returns true if the shift key is pressed for the given event.\r\n\t */\r\n\tkeyboard.isShiftDown = function (evt) {\r\n\t\treturn (evt != null) ? evt.shiftKey : false;\r\n\t};\r\n\r\n\t/**\r\n\t * Function: isAltDown\r\n\t * \r\n\t * Returns true if the alt key is pressed for the given event.\r\n\t */\r\n\tkeyboard.isAltDown = function (evt) {\r\n\t\treturn (evt != null) ? evt.altKey : false;\r\n\t};\r\n\r\n\t/**\r\n\t * Function: isControlDown\r\n\t * \r\n\t * Returns true if the control key is pressed for the given event.\r\n\t */\r\n\tkeyboard.isControlDown = function (evt) {\r\n\t\treturn (evt != null) ? evt.ctrlKey : false;\r\n\t};\r\n\r\n\t/**\r\n\t * Function: isMetaDown\r\n\t * \r\n\t * Returns true if the meta key is pressed for the given event.\r\n\t */\r\n\tkeyboard.isMetaDown = function (evt){\r\n\t\treturn (evt != null) ? evt.metaKey : false;\r\n\t};\r\n\r\n\t/**\r\n\t * TAB key\r\n\t * @attribute TAB\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.TAB = 9;\r\n\r\n\t/**\r\n\t * ENTER key\r\n\t * @attribute ENTER\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.ENTER = 13;\r\n\r\n\t/**\r\n\t * SHIFT key\r\n\t * @attribute SHIFT\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.SHIFT = 16;\r\n\r\n\t/**\r\n\t * CTRL key\r\n\t * @attribute CTRL\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.CTRL = 17;\r\n\r\n\t/**\r\n\t * ALT key\r\n\t * @attribute ALT\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.ALT = 18;\r\n\r\n\t/**\r\n\t * CAPS_LOCK key\r\n\t * @attribute CAPS_LOCK\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.CAPS_LOCK = 20;\r\n\r\n\t/**\r\n\t * ESC key\r\n\t * @attribute ESC\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.ESC = 27;\r\n\r\n\t/**\r\n\t * SPACEBAR key\r\n\t * @attribute SPACEBAR\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.SPACEBAR = 32;\r\n\r\n\t/**\r\n\t * PAGE_UP key\r\n\t * @attribute PAGE_UP\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.PAGE_UP = 33;\r\n\r\n\t/**\r\n\t * PAGE_DOWN key\r\n\t * @attribute PAGE_DOWN\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.PAGE_DOWN = 34;\r\n\r\n\t/**\r\n\t * END key\r\n\t * @attribute END\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.END = 35;\r\n\r\n\t/**\r\n\t * HOME key\r\n\t * @attribute HOME\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.HOME = 36;\r\n\r\n\t/**\r\n\t * INSERT key\r\n\t * @attribute INSERT\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.INSERT = 45;\r\n\r\n\t/**\r\n\t * DEL key\r\n\t * @attribute DEL\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.DEL = 46;\r\n\r\n\t/**\r\n\t * LEFT key\r\n\t * @attribute LEFT\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.LEFT = 37;\r\n\r\n\t/**\r\n\t * RIGHT key\r\n\t * @attribute RIGHT\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.RIGHT = 39;\r\n\r\n\t/**\r\n\t * UP key\r\n\t * @attribute UP\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.UP = 38;\r\n\r\n\t/**\r\n\t * DOWN key\r\n\t * @attribute DOWN\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.DOWN = 40;\r\n\r\n\t/**\r\n\t * NUM0 key\r\n\t * @attribute NUM0\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM0 = 48;\r\n\r\n\t/**\r\n\t * NUM1 key\r\n\t * @attribute NUM1\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM1 = 49;\r\n\r\n\t/**\r\n\t * NUM2 key\r\n\t * @attribute NUM2\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM2 = 50;\r\n\r\n\t/**\r\n\t * NUM3 key\r\n\t * @attribute NUM3\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM3 = 51;\r\n\r\n\t/**\r\n\t * NUM4 key\r\n\t * @attribute NUM4\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM4 = 52;\r\n\r\n\t/**\r\n\t * NUM5 key\r\n\t * @attribute NUM5\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM5 = 53;\r\n\r\n\t/**\r\n\t * NUM6 key\r\n\t * @attribute NUM6\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM6 = 54;\r\n\r\n\t/**\r\n\t * NUM7 key\r\n\t * @attribute NUM7\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM7 = 55;\r\n\r\n\t/**\r\n\t * NUM8 key\r\n\t * @attribute NUM8\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM8 = 56;\r\n\r\n\t/**\r\n\t * NUM9 key\r\n\t * @attribute NUM9\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM9 = 57;\r\n\r\n\t/**\r\n\t * A key\r\n\t * @attribute A\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.A = 65;\r\n\r\n\t/**\r\n\t * B key\r\n\t * @attribute B\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.B = 66;\r\n\r\n\t/**\r\n\t * C key\r\n\t * @attribute C\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.C = 67;\r\n\r\n\t/**\r\n\t * D key\r\n\t * @attribute D\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.D = 68;\r\n\r\n\t/**\r\n\t * E key\r\n\t * @attribute E\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.E = 69;\r\n\r\n\t/**\r\n\t * F key\r\n\t * @attribute F\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F = 70;\r\n\r\n\t/**\r\n\t * G key\r\n\t * @attribute G\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.G = 71;\r\n\r\n\t/**\r\n\t * H key\r\n\t * @attribute H\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.H = 72;\r\n\r\n\t/**\r\n\t * I key\r\n\t * @attribute I\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.I = 73;\r\n\r\n\t/**\r\n\t * J key\r\n\t * @attribute J\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.J = 74;\r\n\r\n\t/**\r\n\t * K key\r\n\t * @attribute K\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.K = 75;\r\n\r\n\t/**\r\n\t * L key\r\n\t * @attribute L\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.L = 76;\r\n\r\n\t/**\r\n\t * M key\r\n\t * @attribute M\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.M = 77;\r\n\r\n\t/**\r\n\t * N key\r\n\t * @attribute N\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.N = 78;\r\n\r\n\t/**\r\n\t * O key\r\n\t * @attribute O\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.O = 79;\r\n\r\n\t/**\r\n\t * P key\r\n\t * @attribute P\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.P = 80;\r\n\r\n\t/**\r\n\t * Q key\r\n\t * @attribute Q\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.Q = 81;\r\n\r\n\t/**\r\n\t * R key\r\n\t * @attribute R\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.R = 82;\r\n\r\n\t/**\r\n\t * S key\r\n\t * @attribute S\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.S = 83;\r\n\r\n\t/**\r\n\t * T key\r\n\t * @attribute T\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.T = 84;\r\n\r\n\t/**\r\n\t * U key\r\n\t * @attribute U\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.U = 85;\r\n\r\n\t/**\r\n\t * V key\r\n\t * @attribute V\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.V = 86;\r\n\r\n\t/**\r\n\t * W key\r\n\t * @attribute W\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.W = 87;\r\n\r\n\t/**\r\n\t * X key\r\n\t * @attribute X\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.X = 88;\r\n\r\n\t/**\r\n\t * Y key\r\n\t * @attribute Y\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.Y = 89;\r\n\r\n\t/**\r\n\t * Z key\r\n\t * @attribute Z\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.Z = 90;\r\n\r\n\t/**\r\n\t * F1 key\r\n\t * @attribute F1\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F1 = 112;\r\n\r\n\t/**\r\n\t * F2 key\r\n\t * @attribute F2\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F2 = 113;\r\n\r\n\t/**\r\n\t * F3 key\r\n\t * @attribute F3\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F3 = 114;\r\n\r\n\t/**\r\n\t * F4 key\r\n\t * @attribute F4\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F4 = 115;\r\n\r\n\t/**\r\n\t * F5 key\r\n\t * @attribute F5\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F5 = 116;\r\n\r\n\t/**\r\n\t * F6 key\r\n\t * @attribute F6\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F6 = 117;\r\n\r\n\t/**\r\n\t * F7 key\r\n\t * @attribute F7\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F7 = 118;\r\n\r\n\t/**\r\n\t * F8 key\r\n\t * @attribute F8\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F8 = 119;\r\n\r\n\t/**\r\n\t * F9 key\r\n\t * @attribute F9\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F9 = 120;\r\n\r\n\t/**\r\n\t * F10 key\r\n\t * @attribute F10\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F10 = 121;\r\n\r\n\t/**\r\n\t * F11 key\r\n\t * @attribute F11\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F11 = 122;\r\n\r\n\t/**\r\n\t * F12 key\r\n\t * @attribute F12\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F12 = 123;\r\n\r\n\treturn skylark.attach(\"devices.keyboard\",keyboard);\t\r\n});\ndefine('skylark-langx-types/types',[\r\n    \"skylark-langx-ns\"\r\n],function(skylark){\r\n    var nativeIsArray = Array.isArray, \r\n        toString = {}.toString;\r\n    \r\n    var type = (function() {\r\n        var class2type = {};\r\n\r\n        // Populate the class2type map\r\n        \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \").forEach(function(name) {\r\n            class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\r\n        });\r\n\r\n        return function type(obj) {\r\n            return obj == null ? String(obj) :\r\n                class2type[toString.call(obj)] || \"object\";\r\n        };\r\n    })();\r\n\r\n \r\n    var  isArray = nativeIsArray || function(obj) {\r\n        return object && object.constructor === Array;\r\n    };\r\n\r\n\r\n    /**\r\n     * Checks if `value` is array-like. A value is considered array-like if it's\r\n     * not a function/string/element and has a `value.length` that's an integer greater than or\r\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n     *\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n     * @example\r\n     *\r\n     * isArrayLike([1, 2, 3])\r\n     * // => true\r\n     *\r\n     * isArrayLike(document.body.children)\r\n     * // => false\r\n     *\r\n     * isArrayLike('abc')\r\n     * // => true\r\n     *\r\n     * isArrayLike(Function)\r\n     * // => false\r\n     */    \r\n    function isArrayLike(obj) {\r\n        return !isString(obj) && !isHtmlNode(obj) && typeof obj.length == 'number' && !isFunction(obj);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a boolean primitive or object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\r\n     * @example\r\n     *\r\n     * isBoolean(false)\r\n     * // => true\r\n     *\r\n     * isBoolean(null)\r\n     * // => false\r\n     */\r\n    function isBoolean(obj) {\r\n       return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\r\n       //return typeof(obj) === \"boolean\";\r\n    }\r\n\r\n    function isDefined(obj) {\r\n        return typeof obj !== 'undefined';\r\n    }\r\n\r\n    function isDocument(obj) {\r\n        return obj != null && obj.nodeType == obj.DOCUMENT_NODE;\r\n    }\r\n\r\n   // Is a given value a DOM element?\r\n    function isElement(obj) {\r\n        return !!(obj && obj.nodeType === 1);\r\n    }   \r\n\r\n    function isEmptyObject(obj) {\r\n        var name;\r\n        for (name in obj) {\r\n            if (obj[name] !== null) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Function` object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n     * @example\r\n     *\r\n     * isFunction(parseInt)\r\n     * // => true\r\n     *\r\n     * isFunction(/abc/)\r\n     * // => false\r\n     */\r\n    function isFunction(value) {\r\n        return type(value) == \"function\";\r\n    }\r\n\r\n\r\n\r\n    function isHtmlNode(obj) {\r\n        return obj && obj.nodeType; // obj instanceof Node; //Consider the elements in IFRAME\r\n    }\r\n\r\n    function isInstanceOf( /*Object*/ value, /*Type*/ type) {\r\n        //Tests whether the value is an instance of a type.\r\n        if (value === undefined) {\r\n            return false;\r\n        } else if (value === null || type == Object) {\r\n            return true;\r\n        } else if (typeof value === \"number\") {\r\n            return type === Number;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else if (typeof value === \"boolean\") {\r\n            return type === Boolean;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else {\r\n            return (value instanceof type) || (value && value.isInstanceOf ? value.isInstanceOf(type) : false);\r\n        }\r\n    }\r\n\r\n    function isNull(obj) {\r\n        return obj === null;\r\n    }\r\n\r\n    function isNumber(obj) {\r\n        return typeof obj == 'number';\r\n    }\r\n\r\n    function isObject(obj) {\r\n        var type = typeof obj;\r\n        return type === 'function' || type === 'object' && !!obj;        \r\n        //return type(obj) == \"object\";\r\n    }\r\n\r\n    function isPlainObject(obj) {\r\n        return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;\r\n    }\r\n\r\n    function isString(obj) {\r\n        return typeof obj === 'string';\r\n    }\r\n\r\n    function isWindow(obj) {\r\n        return obj && obj == obj.window;\r\n    }\r\n\r\n    function isSameOrigin(href) {\r\n        if (href) {\r\n            var origin = location.protocol + '//' + location.hostname;\r\n            if (location.port) {\r\n                origin += ':' + location.port;\r\n            }\r\n            return href.startsWith(origin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Symbol` primitive or object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n     * @example\r\n     *\r\n     * _.isSymbol(Symbol.iterator);\r\n     * // => true\r\n     *\r\n     * _.isSymbol('abc');\r\n     * // => false\r\n     */\r\n    function isSymbol(value) {\r\n      return typeof value == 'symbol' ||\r\n        (isObjectLike(value) && objectToString.call(value) == symbolTag);\r\n    }\r\n\r\n    // Is a given variable undefined?\r\n    function isUndefined(obj) {\r\n        return obj === void 0;\r\n    }\r\n\r\n    return skylark.attach(\"langx.types\",{\r\n\r\n        isArray: isArray,\r\n\r\n        isArrayLike: isArrayLike,\r\n\r\n        isBoolean: isBoolean,\r\n\r\n        isDefined: isDefined,\r\n\r\n        isDocument: isDocument,\r\n\r\n        isElement,\r\n\r\n        isEmpty : isEmptyObject,\r\n\r\n        isEmptyObject: isEmptyObject,\r\n\r\n        isFunction: isFunction,\r\n\r\n        isHtmlNode: isHtmlNode,\r\n\r\n        isNaN : function (obj) {\r\n            return isNaN(obj);\r\n        },\r\n\r\n        isNull: isNull,\r\n\r\n\r\n        isNumber: isNumber,\r\n\r\n        isNumeric: isNumber,\r\n\r\n        isObject: isObject,\r\n\r\n        isPlainObject: isPlainObject,\r\n\r\n        isString: isString,\r\n\r\n        isSameOrigin: isSameOrigin,\r\n\r\n        isSymbol : isSymbol,\r\n\r\n        isUndefined: isUndefined,\r\n\r\n        isWindow: isWindow,\r\n\r\n        type: type\r\n    });\r\n\r\n});\ndefine('skylark-langx-types/main',[\r\n\t\"./types\"\r\n],function(types){\r\n\treturn types;\r\n});\ndefine('skylark-langx-types', ['skylark-langx-types/main'], function (main) { return main; });\n\ndefine('skylark-langx-numbers/numbers',[\r\n    \"skylark-langx-ns\",\r\n    \"skylark-langx-types\"\r\n],function(skylark,types){\r\n\tvar isObject = types.isObject,\r\n\t\tisSymbol = types.isSymbol;\r\n\r\n\tvar INFINITY = 1 / 0,\r\n\t    MAX_SAFE_INTEGER = 9007199254740991,\r\n\t    MAX_INTEGER = 1.7976931348623157e+308,\r\n\t    NAN = 0 / 0;\r\n\r\n\t/** Used to match leading and trailing whitespace. */\r\n\tvar reTrim = /^\\s+|\\s+$/g;\r\n\r\n\t/** Used to detect bad signed hexadecimal string values. */\r\n\tvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\r\n\r\n\t/** Used to detect binary string values. */\r\n\tvar reIsBinary = /^0b[01]+$/i;\r\n\r\n\t/** Used to detect octal string values. */\r\n\tvar reIsOctal = /^0o[0-7]+$/i;\r\n\r\n\t/** Used to detect unsigned integer values. */\r\n\tvar reIsUint = /^(?:0|[1-9]\\d*)$/;\r\n\r\n\t/** Built-in method references without a dependency on `root`. */\r\n\tvar freeParseInt = parseInt;\r\n\r\n\t/**\r\n\t * Converts `value` to a finite number.\r\n\t *\r\n\t * @static\r\n\t * @memberOf _\r\n\t * @since 4.12.0\r\n\t * @category Lang\r\n\t * @param {*} value The value to convert.\r\n\t * @returns {number} Returns the converted number.\r\n\t * @example\r\n\t *\r\n\t * _.toFinite(3.2);\r\n\t * // => 3.2\r\n\t *\r\n\t * _.toFinite(Number.MIN_VALUE);\r\n\t * // => 5e-324\r\n\t *\r\n\t * _.toFinite(Infinity);\r\n\t * // => 1.7976931348623157e+308\r\n\t *\r\n\t * _.toFinite('3.2');\r\n\t * // => 3.2\r\n\t */\r\n\tfunction toFinite(value) {\r\n\t  if (!value) {\r\n\t    return value === 0 ? value : 0;\r\n\t  }\r\n\t  value = toNumber(value);\r\n\t  if (value === INFINITY || value === -INFINITY) {\r\n\t    var sign = (value < 0 ? -1 : 1);\r\n\t    return sign * MAX_INTEGER;\r\n\t  }\r\n\t  return value === value ? value : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Converts `value` to an integer.\r\n\t *\r\n\t * **Note:** This method is loosely based on\r\n\t * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\r\n\t *\r\n\t * @static\r\n\t * @memberOf _\r\n\t * @param {*} value The value to convert.\r\n\t * @returns {number} Returns the converted integer.\r\n\t * @example\r\n\t *\r\n\t * _.toInteger(3.2);\r\n\t * // => 3\r\n\t *\r\n\t * _.toInteger(Number.MIN_VALUE);\r\n\t * // => 0\r\n\t *\r\n\t * _.toInteger(Infinity);\r\n\t * // => 1.7976931348623157e+308\r\n\t *\r\n\t * _.toInteger('3.2');\r\n\t * // => 3\r\n\t */\r\n\tfunction toInteger(value) {\r\n\t  var result = toFinite(value),\r\n\t      remainder = result % 1;\r\n\r\n\t  return result === result ? (remainder ? result - remainder : result) : 0;\r\n\t}\t\r\n\r\n\t/**\r\n\t * Converts `value` to a number.\r\n\t *\r\n\t * @static\r\n\t * @memberOf _\r\n\t * @since 4.0.0\r\n\t * @category Lang\r\n\t * @param {*} value The value to process.\r\n\t * @returns {number} Returns the number.\r\n\t * @example\r\n\t *\r\n\t * _.toNumber(3.2);\r\n\t * // => 3.2\r\n\t *\r\n\t * _.toNumber(Number.MIN_VALUE);\r\n\t * // => 5e-324\r\n\t *\r\n\t * _.toNumber(Infinity);\r\n\t * // => Infinity\r\n\t *\r\n\t * _.toNumber('3.2');\r\n\t * // => 3.2\r\n\t */\r\n\tfunction toNumber(value) {\r\n\t  if (typeof value == 'number') {\r\n\t    return value;\r\n\t  }\r\n\t  if (isSymbol(value)) {\r\n\t    return NAN;\r\n\t  }\r\n\t  if (isObject(value)) {\r\n\t    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\r\n\t    value = isObject(other) ? (other + '') : other;\r\n\t  }\r\n\t  if (typeof value != 'string') {\r\n\t    return value === 0 ? value : +value;\r\n\t  }\r\n\t  value = value.replace(reTrim, '');\r\n\t  var isBinary = reIsBinary.test(value);\r\n\t  return (isBinary || reIsOctal.test(value))\r\n\t    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\r\n\t    : (reIsBadHex.test(value) ? NAN : +value);\r\n\t}\r\n\r\n\treturn  skylark.attach(\"langx.numbers\",{\r\n\t\ttoFinite : toFinite,\r\n\t\ttoNumber : toNumber,\r\n\t\ttoInteger : toInteger\r\n\t});\r\n});\ndefine('skylark-langx-numbers/main',[\r\n\t\"./numbers\"\r\n],function(numbers){\r\n\treturn numbers;\r\n});\ndefine('skylark-langx-numbers', ['skylark-langx-numbers/main'], function (main) { return main; });\n\ndefine('skylark-langx-objects/objects',[\r\n    \"skylark-langx-ns/ns\",\r\n    \"skylark-langx-ns/_attach\",\r\n\t\"skylark-langx-types\",\r\n    \"skylark-langx-numbers\"\r\n],function(skylark,_attach,types,numbers){\r\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty,\r\n        slice = Array.prototype.slice,\r\n        isBoolean = types.isBoolean,\r\n        isFunction = types.isFunction,\r\n\t\tisObject = types.isObject,\r\n\t\tisPlainObject = types.isPlainObject,\r\n\t\tisArray = types.isArray,\r\n        isArrayLike = types.isArrayLike,\r\n        isString = types.isString,\r\n        toInteger = numbers.toInteger;\r\n\r\n     // An internal function for creating assigner functions.\r\n    function createAssigner(keysFunc, defaults) {\r\n        return function(obj) {\r\n          var length = arguments.length;\r\n          if (defaults) obj = Object(obj);  \r\n          if (length < 2 || obj == null) return obj;\r\n          for (var index = 1; index < length; index++) {\r\n            var source = arguments[index],\r\n                keys = keysFunc(source),\r\n                l = keys.length;\r\n            for (var i = 0; i < l; i++) {\r\n              var key = keys[i];\r\n              if (!defaults || obj[key] === void 0) obj[key] = source[key];\r\n            }\r\n          }\r\n          return obj;\r\n       };\r\n    }\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    var eq, deepEq;\r\n    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\r\n\r\n    eq = function(a, b, aStack, bStack) {\r\n        // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\r\n        if (a === b) return a !== 0 || 1 / a === 1 / b;\r\n        // `null` or `undefined` only equal to itself (strict comparison).\r\n        if (a == null || b == null) return false;\r\n        // `NaN`s are equivalent, but non-reflexive.\r\n        if (a !== a) return b !== b;\r\n        // Exhaust primitive checks\r\n        var type = typeof a;\r\n        if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\r\n        return deepEq(a, b, aStack, bStack);\r\n    };\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    deepEq = function(a, b, aStack, bStack) {\r\n        // Unwrap any wrapped objects.\r\n        //if (a instanceof _) a = a._wrapped;\r\n        //if (b instanceof _) b = b._wrapped;\r\n        // Compare `[[Class]]` names.\r\n        var className = toString.call(a);\r\n        if (className !== toString.call(b)) return false;\r\n        switch (className) {\r\n            // Strings, numbers, regular expressions, dates, and booleans are compared by value.\r\n            case '[object RegExp]':\r\n            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\r\n            case '[object String]':\r\n                // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n                // equivalent to `new String(\"5\")`.\r\n                return '' + a === '' + b;\r\n            case '[object Number]':\r\n                // `NaN`s are equivalent, but non-reflexive.\r\n                // Object(NaN) is equivalent to NaN.\r\n                if (+a !== +a) return +b !== +b;\r\n                // An `egal` comparison is performed for other numeric values.\r\n                return +a === 0 ? 1 / +a === 1 / b : +a === +b;\r\n            case '[object Date]':\r\n            case '[object Boolean]':\r\n                // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n                // millisecond representations. Note that invalid dates with millisecond representations\r\n                // of `NaN` are not equivalent.\r\n                return +a === +b;\r\n            case '[object Symbol]':\r\n                return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\r\n        }\r\n\r\n        var areArrays = className === '[object Array]';\r\n        if (!areArrays) {\r\n            if (typeof a != 'object' || typeof b != 'object') return false;\r\n            // Objects with different constructors are not equivalent, but `Object`s or `Array`s\r\n            // from different frames are.\r\n            var aCtor = a.constructor, bCtor = b.constructor;\r\n            if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\r\n                               isFunction(bCtor) && bCtor instanceof bCtor)\r\n                          && ('constructor' in a && 'constructor' in b)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n\r\n        // Initializing stack of traversed objects.\r\n        // It's done here since we only need them for objects and arrays comparison.\r\n        aStack = aStack || [];\r\n        bStack = bStack || [];\r\n        var length = aStack.length;\r\n        while (length--) {\r\n            // Linear search. Performance is inversely proportional to the number of\r\n            // unique nested structures.\r\n            if (aStack[length] === a) return bStack[length] === b;\r\n        }\r\n\r\n        // Add the first object to the stack of traversed objects.\r\n        aStack.push(a);\r\n        bStack.push(b);\r\n\r\n        // Recursively compare objects and arrays.\r\n        if (areArrays) {\r\n            // Compare array lengths to determine if a deep comparison is necessary.\r\n            length = a.length;\r\n            if (length !== b.length) return false;\r\n            // Deep compare the contents, ignoring non-numeric properties.\r\n            while (length--) {\r\n                if (!eq(a[length], b[length], aStack, bStack)) return false;\r\n            }\r\n        } else {\r\n            // Deep compare objects.\r\n            var keys = Object.keys(a), key;\r\n            length = keys.length;\r\n            // Ensure that both objects contain the same number of properties before comparing deep equality.\r\n            if (Object.keys(b).length !== length) return false;\r\n            while (length--) {\r\n                // Deep compare each member\r\n                key = keys[length];\r\n                if (!(b[key]!==undefined && eq(a[key], b[key], aStack, bStack))) return false;\r\n            }\r\n        }\r\n        // Remove the first object from the stack of traversed objects.\r\n        aStack.pop();\r\n        bStack.pop();\r\n        return true;\r\n    };\r\n\r\n    // Retrieve all the property names of an object.\r\n    function allKeys(obj) {\r\n        if (!isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function each(obj, callback) {\r\n        var length, key, i, undef, value;\r\n\r\n        if (obj) {\r\n            length = obj.length;\r\n\r\n            if (length === undef) {\r\n                // Loop object items\r\n                for (key in obj) {\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        value = obj[key];\r\n                        if (callback.call(value, key, value) === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Loop array items\r\n                for (i = 0; i < length; i++) {\r\n                    value = obj[i];\r\n                    if (callback.call(value, i, value) === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function extend(target) {\r\n        var deep, args = slice.call(arguments, 1);\r\n        if (typeof target == 'boolean') {\r\n            deep = target\r\n            target = args.shift()\r\n        }\r\n        if (args.length == 0) {\r\n            args = [target];\r\n            target = this;\r\n        }\r\n        args.forEach(function(arg) {\r\n            mixin(target, arg, deep);\r\n        });\r\n        return target;\r\n    }\r\n\r\n    // Retrieve the names of an object's own properties.\r\n    // Delegates to **ECMAScript 5**'s native `Object.keys`.\r\n    function keys(obj) {\r\n        if (isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) if (has(obj, key)) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function has(obj, path) {\r\n        if (!isArray(path)) {\r\n            return obj != null && hasOwnProperty.call(obj, path);\r\n        }\r\n        var length = path.length;\r\n        for (var i = 0; i < length; i++) {\r\n            var key = path[i];\r\n            if (obj == null || !hasOwnProperty.call(obj, key)) {\r\n                return false;\r\n            }\r\n            obj = obj[key];\r\n        }\r\n        return !!length;\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is in `collection`. If `collection` is a string, it's\r\n     * checked for a substring of `value`, otherwise\r\n     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\r\n     * is used for equality comparisons. If `fromIndex` is negative, it's used as\r\n     * the offset from the end of `collection`.\r\n     *\r\n     * @static\r\n     * @memberOf _\r\n     * @since 0.1.0\r\n     * @category Collection\r\n     * @param {Array|Object|string} collection The collection to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} [fromIndex=0] The index to search from.\r\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\r\n     * @returns {boolean} Returns `true` if `value` is found, else `false`.\r\n     * @example\r\n     *\r\n     * _.includes([1, 2, 3], 1);\r\n     * // => true\r\n     *\r\n     * _.includes([1, 2, 3], 1, 2);\r\n     * // => false\r\n     *\r\n     * _.includes({ 'a': 1, 'b': 2 }, 1);\r\n     * // => true\r\n     *\r\n     * _.includes('abcd', 'bc');\r\n     * // => true\r\n     */\r\n    function includes(collection, value, fromIndex, guard) {\r\n      collection = isArrayLike(collection) ? collection : values(collection);\r\n      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\r\n\r\n      var length = collection.length;\r\n      if (fromIndex < 0) {\r\n        fromIndex = nativeMax(length + fromIndex, 0);\r\n      }\r\n      return isString(collection)\r\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\r\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\r\n    }\r\n\r\n\r\n   // Perform a deep comparison to check if two objects are equal.\r\n    function isEqual(a, b) {\r\n        return eq(a, b);\r\n    }\r\n\r\n    // Returns whether an object has a given set of `key:value` pairs.\r\n    function isMatch(object, attrs) {\r\n        var keys = keys(attrs), length = keys.length;\r\n        if (object == null) return !length;\r\n        var obj = Object(object);\r\n        for (var i = 0; i < length; i++) {\r\n          var key = keys[i];\r\n          if (attrs[key] !== obj[key] || !(key in obj)) return false;\r\n        }\r\n        return true;\r\n    }    \r\n\r\n    function _mixin(target, source, deep, safe) {\r\n        for (var key in source) {\r\n            //if (!source.hasOwnProperty(key)) {\r\n            //    continue;\r\n            //}\r\n            if (safe && target[key] !== undefined) {\r\n                continue;\r\n            }\r\n            if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\r\n                if (isPlainObject(source[key]) && !isPlainObject(target[key])) {\r\n                    target[key] = {};\r\n                }\r\n                if (isArray(source[key]) && !isArray(target[key])) {\r\n                    target[key] = [];\r\n                }\r\n                _mixin(target[key], source[key], deep, safe);\r\n            } else if (source[key] !== undefined) {\r\n                target[key] = source[key]\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function _parseMixinArgs(args) {\r\n        var params = slice.call(arguments, 0),\r\n            target = params.shift(),\r\n            deep = false;\r\n        if (isBoolean(params[params.length - 1])) {\r\n            deep = params.pop();\r\n        }\r\n\r\n        return {\r\n            target: target,\r\n            sources: params,\r\n            deep: deep\r\n        };\r\n    }\r\n\r\n    function mixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, false);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n   // Return a copy of the object without the blacklisted properties.\r\n    function omit(obj, prop1,prop2) {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        var result = mixin({},obj);\r\n        for(var i=1;i<arguments.length;i++) {\r\n            var pn = arguments[i];\r\n            if (pn in obj) {\r\n                delete result[pn];\r\n            }\r\n        }\r\n        return result;\r\n\r\n    }\r\n\r\n   // Return a copy of the object only containing the whitelisted properties.\r\n    function pick(obj,prop1,prop2) {\r\n        if (!obj) {\r\n            return null;\r\n        }\r\n        var result = {};\r\n        for(var i=1;i<arguments.length;i++) {\r\n            var pn = arguments[i];\r\n            if (pn in obj) {\r\n                result[pn] = obj[pn];\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    function removeItem(items, item) {\r\n        if (isArray(items)) {\r\n            var idx = items.indexOf(item);\r\n            if (idx != -1) {\r\n                items.splice(idx, 1);\r\n            }\r\n        } else if (isPlainObject(items)) {\r\n            for (var key in items) {\r\n                if (items[key] == item) {\r\n                    delete items[key];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function result(obj, path, fallback) {\r\n        if (!isArray(path)) {\r\n            path = path.split(\".\");//[path]\r\n        };\r\n        var length = path.length;\r\n        if (!length) {\r\n          return isFunction(fallback) ? fallback.call(obj) : fallback;\r\n        }\r\n        for (var i = 0; i < length; i++) {\r\n          var prop = obj == null ? void 0 : obj[path[i]];\r\n          if (prop === void 0) {\r\n            prop = fallback;\r\n            i = length; // Ensure we don't continue iterating.\r\n          }\r\n          obj = isFunction(prop) ? prop.call(obj) : prop;\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    function safeMixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, true);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    // Retrieve the values of an object's properties.\r\n    function values(obj) {\r\n        var keys = allKeys(obj);\r\n        var length = keys.length;\r\n        var values = Array(length);\r\n        for (var i = 0; i < length; i++) {\r\n            values[i] = obj[keys[i]];\r\n        }\r\n        return values;\r\n    }\r\n\r\n    function clone( /*anything*/ src,checkCloneMethod) {\r\n        var copy;\r\n        if (src === undefined || src === null) {\r\n            copy = src;\r\n        } else if (checkCloneMethod && src.clone) {\r\n            copy = src.clone();\r\n        } else if (isArray(src)) {\r\n            copy = [];\r\n            for (var i = 0; i < src.length; i++) {\r\n                copy.push(clone(src[i]));\r\n            }\r\n        } else if (isPlainObject(src)) {\r\n            copy = {};\r\n            for (var key in src) {\r\n                copy[key] = clone(src[key]);\r\n            }\r\n        } else {\r\n            copy = src;\r\n        }\r\n\r\n        return copy;\r\n\r\n    }\r\n\r\n    return skylark.attach(\"langx.objects\",{\r\n        allKeys: allKeys,\r\n\r\n        attach : _attach,\r\n\r\n        clone: clone,\r\n\r\n        defaults : createAssigner(allKeys, true),\r\n\r\n        each : each,\r\n\r\n        extend : extend,\r\n\r\n        has: has,\r\n\r\n        isEqual: isEqual,   \r\n\r\n        includes: includes,\r\n\r\n        isMatch: isMatch,\r\n\r\n        keys: keys,\r\n\r\n        mixin: mixin,\r\n\r\n        omit: omit,\r\n\r\n        pick: pick,\r\n\r\n        removeItem: removeItem,\r\n\r\n        result : result,\r\n        \r\n        safeMixin: safeMixin,\r\n\r\n        values: values\r\n    });\r\n\r\n\r\n});\ndefine('skylark-langx-objects/main',[\r\n\t\"./objects\"\r\n],function(objects){\r\n\treturn objects;\r\n});\ndefine('skylark-langx-objects', ['skylark-langx-objects/main'], function (main) { return main; });\n\ndefine('skylark-langx-arrays/arrays',[\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\"\r\n],function(skylark,types,objects){\r\n  var filter = Array.prototype.filter,\r\n      find = Array.prototype.find,\r\n    isArrayLike = types.isArrayLike;\r\n\r\n    /**\r\n     * The base implementation of `_.findIndex` and `_.findLastIndex` without\r\n     * support for iteratee shorthands.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {Function} predicate The function invoked per iteration.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @param {boolean} [fromRight] Specify iterating from right to left.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseFindIndex(array, predicate, fromIndex, fromRight) {\r\n      var length = array.length,\r\n          index = fromIndex + (fromRight ? 1 : -1);\r\n\r\n      while ((fromRight ? index-- : ++index < length)) {\r\n        if (predicate(array[index], index, array)) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\r\n     *\r\n     * @param {Array} array The array to inspect.\r\n     * @param {*} value The value to search for.\r\n     * @param {number} fromIndex The index to search from.\r\n     * @returns {number} Returns the index of the matched value, else `-1`.\r\n     */\r\n    function baseIndexOf(array, value, fromIndex) {\r\n      if (value !== value) {\r\n        return baseFindIndex(array, baseIsNaN, fromIndex);\r\n      }\r\n      var index = fromIndex - 1,\r\n          length = array.length;\r\n\r\n      while (++index < length) {\r\n        if (array[index] === value) {\r\n          return index;\r\n        }\r\n      }\r\n      return -1;\r\n    }\r\n\r\n    /**\r\n     * The base implementation of `isNaN` without support for number objects.\r\n     *\r\n     * @private\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\r\n     */\r\n    function baseIsNaN(value) {\r\n      return value !== value;\r\n    }\r\n\r\n\r\n    function compact(array) {\r\n        return filter.call(array, function(item) {\r\n            return item != null;\r\n        });\r\n    }\r\n\r\n    function filter2(array,func) {\r\n      return filter.call(array,func);\r\n    }\r\n\r\n    function flatten(array) {\r\n        if (isArrayLike(array)) {\r\n            var result = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                var item = array[i];\r\n                if (isArrayLike(item)) {\r\n                    for (var j = 0; j < item.length; j++) {\r\n                        result.push(item[j]);\r\n                    }\r\n                } else {\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            return array;\r\n        }\r\n        //return array.length > 0 ? concat.apply([], array) : array;\r\n    }\r\n\r\n    function grep(array, callback) {\r\n        var out = [];\r\n\r\n        objects.each(array, function(i, item) {\r\n            if (callback(item, i)) {\r\n                out.push(item);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    function inArray(item, array) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        var i;\r\n\r\n        if (array.indexOf) {\r\n            return array.indexOf(item);\r\n        }\r\n\r\n        i = array.length;\r\n        while (i--) {\r\n            if (array[i] === item) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function makeArray(obj, offset, startWith) {\r\n       if (isArrayLike(obj) ) {\r\n        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\r\n      }\r\n\r\n      // array of single index\r\n      return [ obj ];             \r\n    }\r\n\r\n\r\n    function forEach (arr, fn) {\r\n      if (arr.forEach) return arr.forEach(fn)\r\n      for (var i = 0; i < arr.length; i++) fn(arr[i], i);\r\n    }\r\n\r\n    function map(elements, callback) {\r\n        var value, values = [],\r\n            i, key\r\n        if (isArrayLike(elements))\r\n            for (i = 0; i < elements.length; i++) {\r\n                value = callback.call(elements[i], elements[i], i);\r\n                if (value != null) values.push(value)\r\n            }\r\n        else\r\n            for (key in elements) {\r\n                value = callback.call(elements[key], elements[key], key);\r\n                if (value != null) values.push(value)\r\n            }\r\n        return flatten(values)\r\n    }\r\n\r\n\r\n    function merge( first, second ) {\r\n      var l = second.length,\r\n          i = first.length,\r\n          j = 0;\r\n\r\n      if ( typeof l === \"number\" ) {\r\n        for ( ; j < l; j++ ) {\r\n          first[ i++ ] = second[ j ];\r\n        }\r\n      } else {\r\n        while ( second[j] !== undefined ) {\r\n          first[ i++ ] = second[ j++ ];\r\n        }\r\n      }\r\n\r\n      first.length = i;\r\n\r\n      return first;\r\n    }\r\n\r\n    function reduce(array,callback,initialValue) {\r\n        return Array.prototype.reduce.call(array,callback,initialValue);\r\n    }\r\n\r\n    function uniq(array) {\r\n        return filter.call(array, function(item, idx) {\r\n            return array.indexOf(item) == idx;\r\n        })\r\n    }\r\n\r\n    function find2(array,func) {\r\n      return find.call(array,func);\r\n    }\r\n\r\n    return skylark.attach(\"langx.arrays\",{\r\n        baseFindIndex: baseFindIndex,\r\n\r\n        baseIndexOf : baseIndexOf,\r\n        \r\n        compact: compact,\r\n\r\n        first : function(items,n) {\r\n            if (n) {\r\n                return items.slice(0,n);\r\n            } else {\r\n                return items[0];\r\n            }\r\n        },\r\n\r\n        filter : filter2,\r\n\r\n        find : find2,\r\n        \r\n        flatten: flatten,\r\n\r\n        grep: grep,\r\n\r\n        inArray: inArray,\r\n\r\n        makeArray: makeArray,\r\n\r\n        merge : merge,\r\n\r\n        forEach : forEach,\r\n\r\n        map : map,\r\n        \r\n        reduce : reduce,\r\n\r\n        uniq : uniq\r\n\r\n    });\r\n});\ndefine('skylark-langx-arrays/main',[\r\n\t\"./arrays\"\r\n],function(arrays){\r\n\treturn arrays;\r\n});\ndefine('skylark-langx-arrays', ['skylark-langx-arrays/main'], function (main) { return main; });\n\ndefine('skylark-langx-klass/klass',[\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-arrays\",\r\n],function(skylark,types,objects,arrays){\r\n    var uniq = arrays.uniq,\r\n        has = objects.has,\r\n        mixin = objects.mixin,\r\n        isArray = types.isArray,\r\n        isDefined = types.isDefined;\r\n\r\n/* for reference \r\n function klass(props,parent) {\r\n    var ctor = function(){\r\n        this._construct();\r\n    };\r\n    ctor.prototype = props;\r\n    if (parent) {\r\n        ctor._proto_ = parent;\r\n        props.__proto__ = parent.prototype;\r\n    }\r\n    return ctor;\r\n}\r\n\r\n// Type some JavaScript code here.\r\nlet animal = klass({\r\n  _construct(){\r\n      this.name = this.name + \",hi\";\r\n  },\r\n    \r\n  name: \"Animal\",\r\n  eat() {         // [[HomeObject]] == animal\r\n    alert(`${this.name} eats.`);\r\n  }\r\n    \r\n    \r\n});\r\n\r\n\r\nlet rabbit = klass({\r\n  name: \"Rabbit\",\r\n  _construct(){\r\n      super._construct();\r\n  },\r\n  eat() {         // [[HomeObject]] == rabbit\r\n    super.eat();\r\n  }\r\n},animal);\r\n\r\nlet longEar = klass({\r\n  name: \"Long Ear\",\r\n  eat() {         // [[HomeObject]] == longEar\r\n    super.eat();\r\n  }\r\n},rabbit);\r\n*/\r\n    \r\n    function inherit(ctor, base) {\r\n        var f = function() {};\r\n        f.prototype = base.prototype;\r\n\r\n        ctor.prototype = new f();\r\n    }\r\n\r\n    var f1 = function() {\r\n        function extendClass(ctor, props, options) {\r\n            // Copy the properties to the prototype of the class.\r\n            var proto = ctor.prototype,\r\n                _super = ctor.superclass.prototype,\r\n                noOverrided = options && options.noOverrided,\r\n                overrides = options && options.overrides || {};\r\n\r\n            for (var name in props) {\r\n                if (name === \"constructor\") {\r\n                    continue;\r\n                }\r\n\r\n                // Check if we're overwriting an existing function\r\n                var prop = props[name];\r\n                if (typeof props[name] == \"function\") {\r\n                    proto[name] =  !prop._constructor && !noOverrided && typeof _super[name] == \"function\" ?\r\n                          (function(name, fn, superFn) {\r\n                            return function() {\r\n                                var tmp = this.overrided;\r\n\r\n                                // Add a new ._super() method that is the same method\r\n                                // but on the super-class\r\n                                this.overrided = superFn;\r\n\r\n                                // The method only need to be bound temporarily, so we\r\n                                // remove it when we're done executing\r\n                                var ret = fn.apply(this, arguments);\r\n\r\n                                this.overrided = tmp;\r\n\r\n                                return ret;\r\n                            };\r\n                        })(name, prop, _super[name]) :\r\n                        prop;\r\n                } else if (types.isPlainObject(prop) && prop!==null && (prop.get)) {\r\n                    Object.defineProperty(proto,name,prop);\r\n                } else {\r\n                    proto[name] = prop;\r\n                }\r\n            }\r\n            return ctor;\r\n        }\r\n\r\n        function serialMixins(ctor,mixins) {\r\n            var result = [];\r\n\r\n            mixins.forEach(function(mixin){\r\n                if (has(mixin,\"__mixins__\")) {\r\n                     throw new Error(\"nested mixins\");\r\n                }\r\n                var clss = [];\r\n                while (mixin) {\r\n                    clss.unshift(mixin);\r\n                    mixin = mixin.superclass;\r\n                }\r\n                result = result.concat(clss);\r\n            });\r\n\r\n            result = uniq(result);\r\n\r\n            result = result.filter(function(mixin){\r\n                var cls = ctor;\r\n                while (cls) {\r\n                    if (mixin === cls) {\r\n                        return false;\r\n                    }\r\n                    if (has(cls,\"__mixins__\")) {\r\n                        var clsMixines = cls[\"__mixins__\"];\r\n                        for (var i=0; i<clsMixines.length;i++) {\r\n                            if (clsMixines[i]===mixin) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    cls = cls.superclass;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (result.length>0) {\r\n                return result;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function mergeMixins(ctor,mixins) {\r\n            var newCtor =ctor;\r\n            for (var i=0;i<mixins.length;i++) {\r\n                var xtor = new Function();\r\n                xtor.prototype = Object.create(newCtor.prototype);\r\n                xtor.__proto__ = newCtor;\r\n                xtor.superclass = null;\r\n                mixin(xtor.prototype,mixins[i].prototype);\r\n                xtor.prototype.__mixin__ = mixins[i];\r\n                newCtor = xtor;\r\n            }\r\n\r\n            return newCtor;\r\n        }\r\n\r\n        function _constructor ()  {\r\n            if (this._construct) {\r\n                return this._construct.apply(this, arguments);\r\n            } else  if (this.init) {\r\n                return this.init.apply(this, arguments);\r\n            }\r\n        }\r\n\r\n        return function createClass(props, parent, mixins,options) {\r\n            if (isArray(parent)) {\r\n                options = mixins;\r\n                mixins = parent;\r\n                parent = null;\r\n            }\r\n            parent = parent || Object;\r\n\r\n            if (isDefined(mixins) && !isArray(mixins)) {\r\n                options = mixins;\r\n                mixins = false;\r\n            }\r\n\r\n            var innerParent = parent;\r\n\r\n            if (mixins) {\r\n                mixins = serialMixins(innerParent,mixins);\r\n            }\r\n\r\n            if (mixins) {\r\n                innerParent = mergeMixins(innerParent,mixins);\r\n            }\r\n\r\n            var klassName = props.klassName || \"\",\r\n                ctor = new Function(\r\n                    \"return function \" + klassName + \"() {\" +\r\n                    \"var inst = this,\" +\r\n                    \" ctor = arguments.callee;\" +\r\n                    \"if (!(inst instanceof ctor)) {\" +\r\n                    \"inst = Object.create(ctor.prototype);\" +\r\n                    \"}\" +\r\n                    \"return ctor._constructor.apply(inst, arguments) || inst;\" + \r\n                    \"}\"\r\n                )();\r\n\r\n\r\n            // Populate our constructed prototype object\r\n            ctor.prototype = Object.create(innerParent.prototype);\r\n\r\n            // Enforce the constructor to be what we expect\r\n            ctor.prototype.constructor = ctor;\r\n            ctor.superclass = parent;\r\n\r\n            // And make this class extendable\r\n            ctor.__proto__ = innerParent;\r\n\r\n\r\n            if (!ctor._constructor) {\r\n                ctor._constructor = _constructor;\r\n            } \r\n\r\n            if (mixins) {\r\n                ctor.__mixins__ = mixins;\r\n            }\r\n\r\n            if (!ctor.partial) {\r\n                ctor.partial = function(props, options) {\r\n                    return extendClass(this, props, options);\r\n                };\r\n            }\r\n            if (!ctor.inherit) {\r\n                ctor.inherit = function(props, mixins,options) {\r\n                    return createClass(props, this, mixins,options);\r\n                };\r\n            }\r\n\r\n            ctor.partial(props, options);\r\n\r\n            return ctor;\r\n        };\r\n    }\r\n\r\n    var createClass = f1();\r\n\r\n    return skylark.attach(\"langx.klass\",createClass);\r\n});\ndefine('skylark-langx-klass/main',[\r\n\t\"./klass\"\r\n],function(klass){\r\n\treturn klass;\r\n});\ndefine('skylark-langx-klass', ['skylark-langx-klass/main'], function (main) { return main; });\n\ndefine('skylark-devices-keyboard/Key',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./keyboard\"\r\n],function(klass,keyboard){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Key is used by Keyboard, Mouse, etc, to represent a key state.\r\n\t *\r\n\t * @class Key\r\n\t * @module Input\r\n\t*/\r\n\tvar Key = klass({\r\n\t\t_construct : function() {\r\n\t\t\t/**\r\n\t\t\t * Indicates if this key is currently pressed.\r\n\t\t\t * @property pressed\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tthis.pressed = false;\r\n\r\n\t\t\t/**\r\n\t\t\t * Indicates if this key was just pressed.\r\n\t\t\t * @property justPressed\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tthis.justPressed = false;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Indicates if this key was just released.\r\n\t\t\t * @property justReleased\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tthis.justReleased = false;\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update Key status based on new key state.\r\n\t\t * \r\n\t\t * @method update\r\n\t\t */\r\n\t\tupdate : function(action)  {\r\n\t\t\tthis.justPressed = false;\r\n\t\t\tthis.justReleased = false;\r\n\r\n\t\t\tif(action === Key.DOWN)\r\n\t\t\t{\r\n\t\t\t\tif(this.pressed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.justPressed = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis.pressed = true;\r\n\t\t\t}\r\n\t\t\telse if(action === Key.UP)\r\n\t\t\t{\r\n\t\t\t\tif(this.pressed)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.justReleased = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis.pressed = false;\r\n\t\t\t}\r\n\t\t\telse if(action === Key.RESET)\r\n\t\t\t{\r\n\t\t\t\tthis.justReleased = false;\r\n\t\t\t\tthis.justPressed = false;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set this key attributes manually.\r\n\t\t * \r\n\t\t * @method set\r\n\t\t */\r\n\t\tset : function(justPressed, pressed, justReleased){\r\n\t\t\tthis.justPressed = justPressed;\r\n\t\t\tthis.pressed = pressed;\r\n\t\t\tthis.justReleased = justReleased;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reset key to default values.\r\n\t\t * \r\n\t\t * @method reset\r\n\t\t*/\r\n\t\treset : function() \t{\r\n\t\t\tthis.justPressed = false;\r\n\t\t\tthis.pressed = false;\r\n\t\t\tthis.justReleased = false;\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t * Down\r\n\t * @attribute DOWN\r\n\t * @type {Number}\r\n\t */\r\n\tKey.DOWN = -1;\r\n\r\n\t/**\r\n\t * Up\r\n\t * @attribute UP\r\n\t * @type {Number}\r\n\t */\r\n\tKey.UP = 1;\r\n\r\n\t/**\r\n\t * Reset\r\n\t * @attribute RESET\r\n\t * @type {Number}\r\n\t */\r\n\tKey.RESET = 0;\r\n\r\n\r\n\treturn keyboard.Key = Key;\r\n\r\n});\ndefine('skylark-devices-keyboard/Monitor',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./keyboard\",\r\n\t\"./Key\"\r\n],function(\r\n\tklass,\r\n\tkeyboard,\r\n\tKey\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Keyboard instance for input in sync with the running 3D application.\r\n\t * \r\n\t * The keyboard object provided by scripts is automatically updated by the runtime handler.\r\n\t * \r\n\t * @class Keyboard\r\n\t * @module Input\r\n\t * @param {Boolean} dontInitialize If true the mouse events are not created.\r\n\t */\r\n\tvar Monitor = klass({\r\n\t\t_construct : function (dontInitialize) \t{\r\n\t\t\t/**\r\n\t\t\t * Array with keyboard keys status.\r\n\t\t\t *\r\n\t\t\t * @property keys\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.keys = [];\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * The actions array serves as a buffer for the key input actions.\r\n\t\t\t *\r\n\t\t\t * Until the update method is called it stores all the key stroke actions.\r\n\t\t\t *\r\n\t\t\t * On update the key strokes are updated and the keys array stores the correct values.\r\n\t\t\t *\r\n\t\t\t * @property actions\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.actions = [];\r\n\r\n\t\t\tvar self = this;\r\n\t\t\tvar actions = this.actions;\r\n\r\n\t\t\t/**\r\n\t\t\t * Event manager used to handle the keyup, keydown and focus events.\r\n\t\t\t *\r\n\t\t\t * On each event actions are added to the actions array.\r\n\t\t\t *\r\n\t\t\t * @property events\r\n\t\t\t * @type {EventManager}\r\n\t\t\t */\r\n\t\t\t//this.events = new EventManager();\r\n\t\t\t/*\r\n\t\t\tthis.events.add(window, \"keydown\", function(event)\r\n\t\t\t{\r\n\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\tactions.push(Key.DOWN);\r\n\t\t\t});\r\n\t\t\tthis.events.add(window, \"keyup\", function(event)\r\n\t\t\t{\r\n\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\tactions.push(Key.UP);\r\n\t\t\t});\r\n\t\t\tthis.events.add(window, \"focus\", function(event)\r\n\t\t\t{\r\n\t\t\t\tself.reset();\r\n\t\t\t});\r\n\t\t\t*/\r\n\t\t\tthis.handlers = {\r\n\t\t\t\t\"keydown\" : function(event) {\r\n\t\t\t\t\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\t\t\t\t\tactions.push(Key.DOWN);\r\n\t\t\t\t\t\t\t},\t\t\t\r\n\t\t\t\t\"keyup\" : function(event) {\r\n\t\t\t\t\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\t\t\t\t\tactions.push(Key.UP);\r\n\t\t\t\t\t\t\t},\t\t\t\r\n\t\t\t\t\"focus\" : function(event) {\r\n\t\t\t\t\t\t\t\tself.reset();\r\n\t\t\t\t\t\t\t},\t\t\t\r\n\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif(dontInitialize !== true)\r\n\t\t\t{\r\n\t\t\t\tthis.create();\r\n\t\t\t}\r\n\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update key flags synchronously.\r\n\t\t * \r\n\t\t * @method update\r\n\t\t */\r\n\t\tupdate : function() \t{\r\n\t\t\tvar end = 0;\r\n\r\n\t\t\twhile(this.actions.length > end)\r\n\t\t\t{\r\n\t\t\t\tvar key = this.actions.shift();\r\n\t\t\t\tvar action = this.actions.shift();\r\n\r\n\t\t\t\tif(this.keys[key] === undefined)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.keys[key] = new Key();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.keys[key].update(action);\r\n\r\n\t\t\t\tif(this.keys[key].justReleased || this.keys[key].justPressed)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.actions.push(key);\r\n\t\t\t\t\tthis.actions.push(Key.RESET);\r\n\t\t\t\t\tend += 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reset keyboard status to default.\r\n\t\t *\r\n\t\t * Does not clean the action list.\r\n\t\t * \r\n\t\t * @method reset\r\n\t\t */\r\n\t\treset : function() {\r\n\t\t\t//Reset all keys\r\n\t\t\tfor(var i = 0; i < this.keys.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(this.keys[i] !== undefined)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.keys[i].reset();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if a key is pressed.\r\n\t\t * \r\n\t\t * @method keyPressed\r\n\t\t * @return {boolean} True is the key is currently pressed\r\n\t\t */\r\n\t\tkeyPressed : function(key){\r\n\t\t\treturn this.keys[key] !== undefined && this.keys[key].pressed;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check is a key as just pressed.\r\n\t\t * \r\n\t\t * @method keyJustPressed\r\n\t\t * @return {boolean} True is the key was just pressed\r\n\t\t */\r\n\t\tkeyJustPressed : function(key){\r\n\t\t\treturn this.keys[key] !== undefined && this.keys[key].justPressed;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if a key was just released.\r\n\t\t * \r\n\t\t * @method keyJustReleased\r\n\t\t * @return {boolean} True is the key was just pressed\r\n\t\t */\r\n\t\tkeyJustReleased : function(key){\r\n\t\t\treturn this.keys[key] !== undefined && this.keys[key].justReleased;\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Create keyboard events.\r\n\t\t * \r\n\t\t * @method dispose\r\n\t\t */\r\n\t\tcreate : function(){\r\n\t\t\t//this.events.create();\r\n\t\t\tfor (var event in this.handlers) {\r\n\t\t\t\twindow.addEventListener(event,this.handlers[event]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Dispose keyboard events.\r\n\t\t * \r\n\t\t * @method dispose\r\n\t\t */\r\n\t\tdispose : function()\t{\r\n\t\t\t//this.events.destroy();\r\n\t\t\tfor (var event in this.handlers) {\r\n\t\t\t\twindow.removeEventListener(event,this.handlers[event]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\treturn keyboard.Monitor =  Monitor;\r\n});\ndefine('skylark-devices-keyboard/main',[\r\n\t\"./keyboard\",\r\n\t\"./Key\",\r\n\t\"./Monitor\"\r\n],function(keyboard){\r\n\treturn keyboard;\r\n});\ndefine('skylark-devices-keyboard', ['skylark-devices-keyboard/main'], function (main) { return main; });\n\n"]}