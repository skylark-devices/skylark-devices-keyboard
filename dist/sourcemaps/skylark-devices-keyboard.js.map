{"version":3,"sources":["skylark-devices-keyboard.js"],"names":["define","skylark","keyboard","isShiftDown","evt","shiftKey","isAltDown","altKey","isControlDown","ctrlKey","isMetaDown","metaKey","TAB","ENTER","SHIFT","CTRL","ALT","CAPS_LOCK","ESC","SPACEBAR","PAGE_UP","PAGE_DOWN","END","HOME","INSERT","DEL","LEFT","RIGHT","UP","DOWN","NUM0","NUM1","NUM2","NUM3","NUM4","NUM5","NUM6","NUM7","NUM8","NUM9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","attach","klass","Key","_construct","this","pressed","justPressed","justReleased","update","action","RESET","set","reset","Monitor","dontInitialize","keys","actions","self","handlers","keydown","event","push","keyCode","keyup","focus","create","end","length","key","shift","undefined","i","keyPressed","keyJustPressed","keyJustReleased","window","addEventListener","dispose","removeEventListener","main"],"mappings":"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","file":"../skylark-devices-keyboard.js","sourcesContent":["define('skylark-devices-keyboard/keyboard',[\r\n\t\"skylark-langx-ns\"\r\n],function(skylark){\r\n\tvar keyboard = {};\r\n\t/**\r\n\t * Function: isShiftDown\r\n\t * \r\n\t * Returns true if the shift key is pressed for the given event.\r\n\t */\r\n\tkeyboard.isShiftDown = function (evt) {\r\n\t\treturn (evt != null) ? evt.shiftKey : false;\r\n\t};\r\n\r\n\t/**\r\n\t * Function: isAltDown\r\n\t * \r\n\t * Returns true if the alt key is pressed for the given event.\r\n\t */\r\n\tkeyboard.isAltDown = function (evt) {\r\n\t\treturn (evt != null) ? evt.altKey : false;\r\n\t};\r\n\r\n\t/**\r\n\t * Function: isControlDown\r\n\t * \r\n\t * Returns true if the control key is pressed for the given event.\r\n\t */\r\n\tkeyboard.isControlDown = function (evt) {\r\n\t\treturn (evt != null) ? evt.ctrlKey : false;\r\n\t};\r\n\r\n\t/**\r\n\t * Function: isMetaDown\r\n\t * \r\n\t * Returns true if the meta key is pressed for the given event.\r\n\t */\r\n\tkeyboard.isMetaDown = function (evt){\r\n\t\treturn (evt != null) ? evt.metaKey : false;\r\n\t};\r\n\r\n\t/**\r\n\t * TAB key\r\n\t * @attribute TAB\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.TAB = 9;\r\n\r\n\t/**\r\n\t * ENTER key\r\n\t * @attribute ENTER\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.ENTER = 13;\r\n\r\n\t/**\r\n\t * SHIFT key\r\n\t * @attribute SHIFT\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.SHIFT = 16;\r\n\r\n\t/**\r\n\t * CTRL key\r\n\t * @attribute CTRL\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.CTRL = 17;\r\n\r\n\t/**\r\n\t * ALT key\r\n\t * @attribute ALT\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.ALT = 18;\r\n\r\n\t/**\r\n\t * CAPS_LOCK key\r\n\t * @attribute CAPS_LOCK\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.CAPS_LOCK = 20;\r\n\r\n\t/**\r\n\t * ESC key\r\n\t * @attribute ESC\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.ESC = 27;\r\n\r\n\t/**\r\n\t * SPACEBAR key\r\n\t * @attribute SPACEBAR\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.SPACEBAR = 32;\r\n\r\n\t/**\r\n\t * PAGE_UP key\r\n\t * @attribute PAGE_UP\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.PAGE_UP = 33;\r\n\r\n\t/**\r\n\t * PAGE_DOWN key\r\n\t * @attribute PAGE_DOWN\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.PAGE_DOWN = 34;\r\n\r\n\t/**\r\n\t * END key\r\n\t * @attribute END\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.END = 35;\r\n\r\n\t/**\r\n\t * HOME key\r\n\t * @attribute HOME\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.HOME = 36;\r\n\r\n\t/**\r\n\t * INSERT key\r\n\t * @attribute INSERT\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.INSERT = 45;\r\n\r\n\t/**\r\n\t * DEL key\r\n\t * @attribute DEL\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.DEL = 46;\r\n\r\n\t/**\r\n\t * LEFT key\r\n\t * @attribute LEFT\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.LEFT = 37;\r\n\r\n\t/**\r\n\t * RIGHT key\r\n\t * @attribute RIGHT\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.RIGHT = 39;\r\n\r\n\t/**\r\n\t * UP key\r\n\t * @attribute UP\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.UP = 38;\r\n\r\n\t/**\r\n\t * DOWN key\r\n\t * @attribute DOWN\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.DOWN = 40;\r\n\r\n\t/**\r\n\t * NUM0 key\r\n\t * @attribute NUM0\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM0 = 48;\r\n\r\n\t/**\r\n\t * NUM1 key\r\n\t * @attribute NUM1\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM1 = 49;\r\n\r\n\t/**\r\n\t * NUM2 key\r\n\t * @attribute NUM2\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM2 = 50;\r\n\r\n\t/**\r\n\t * NUM3 key\r\n\t * @attribute NUM3\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM3 = 51;\r\n\r\n\t/**\r\n\t * NUM4 key\r\n\t * @attribute NUM4\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM4 = 52;\r\n\r\n\t/**\r\n\t * NUM5 key\r\n\t * @attribute NUM5\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM5 = 53;\r\n\r\n\t/**\r\n\t * NUM6 key\r\n\t * @attribute NUM6\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM6 = 54;\r\n\r\n\t/**\r\n\t * NUM7 key\r\n\t * @attribute NUM7\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM7 = 55;\r\n\r\n\t/**\r\n\t * NUM8 key\r\n\t * @attribute NUM8\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM8 = 56;\r\n\r\n\t/**\r\n\t * NUM9 key\r\n\t * @attribute NUM9\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.NUM9 = 57;\r\n\r\n\t/**\r\n\t * A key\r\n\t * @attribute A\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.A = 65;\r\n\r\n\t/**\r\n\t * B key\r\n\t * @attribute B\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.B = 66;\r\n\r\n\t/**\r\n\t * C key\r\n\t * @attribute C\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.C = 67;\r\n\r\n\t/**\r\n\t * D key\r\n\t * @attribute D\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.D = 68;\r\n\r\n\t/**\r\n\t * E key\r\n\t * @attribute E\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.E = 69;\r\n\r\n\t/**\r\n\t * F key\r\n\t * @attribute F\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F = 70;\r\n\r\n\t/**\r\n\t * G key\r\n\t * @attribute G\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.G = 71;\r\n\r\n\t/**\r\n\t * H key\r\n\t * @attribute H\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.H = 72;\r\n\r\n\t/**\r\n\t * I key\r\n\t * @attribute I\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.I = 73;\r\n\r\n\t/**\r\n\t * J key\r\n\t * @attribute J\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.J = 74;\r\n\r\n\t/**\r\n\t * K key\r\n\t * @attribute K\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.K = 75;\r\n\r\n\t/**\r\n\t * L key\r\n\t * @attribute L\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.L = 76;\r\n\r\n\t/**\r\n\t * M key\r\n\t * @attribute M\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.M = 77;\r\n\r\n\t/**\r\n\t * N key\r\n\t * @attribute N\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.N = 78;\r\n\r\n\t/**\r\n\t * O key\r\n\t * @attribute O\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.O = 79;\r\n\r\n\t/**\r\n\t * P key\r\n\t * @attribute P\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.P = 80;\r\n\r\n\t/**\r\n\t * Q key\r\n\t * @attribute Q\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.Q = 81;\r\n\r\n\t/**\r\n\t * R key\r\n\t * @attribute R\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.R = 82;\r\n\r\n\t/**\r\n\t * S key\r\n\t * @attribute S\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.S = 83;\r\n\r\n\t/**\r\n\t * T key\r\n\t * @attribute T\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.T = 84;\r\n\r\n\t/**\r\n\t * U key\r\n\t * @attribute U\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.U = 85;\r\n\r\n\t/**\r\n\t * V key\r\n\t * @attribute V\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.V = 86;\r\n\r\n\t/**\r\n\t * W key\r\n\t * @attribute W\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.W = 87;\r\n\r\n\t/**\r\n\t * X key\r\n\t * @attribute X\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.X = 88;\r\n\r\n\t/**\r\n\t * Y key\r\n\t * @attribute Y\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.Y = 89;\r\n\r\n\t/**\r\n\t * Z key\r\n\t * @attribute Z\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.Z = 90;\r\n\r\n\t/**\r\n\t * F1 key\r\n\t * @attribute F1\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F1 = 112;\r\n\r\n\t/**\r\n\t * F2 key\r\n\t * @attribute F2\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F2 = 113;\r\n\r\n\t/**\r\n\t * F3 key\r\n\t * @attribute F3\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F3 = 114;\r\n\r\n\t/**\r\n\t * F4 key\r\n\t * @attribute F4\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F4 = 115;\r\n\r\n\t/**\r\n\t * F5 key\r\n\t * @attribute F5\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F5 = 116;\r\n\r\n\t/**\r\n\t * F6 key\r\n\t * @attribute F6\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F6 = 117;\r\n\r\n\t/**\r\n\t * F7 key\r\n\t * @attribute F7\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F7 = 118;\r\n\r\n\t/**\r\n\t * F8 key\r\n\t * @attribute F8\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F8 = 119;\r\n\r\n\t/**\r\n\t * F9 key\r\n\t * @attribute F9\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F9 = 120;\r\n\r\n\t/**\r\n\t * F10 key\r\n\t * @attribute F10\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F10 = 121;\r\n\r\n\t/**\r\n\t * F11 key\r\n\t * @attribute F11\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F11 = 122;\r\n\r\n\t/**\r\n\t * F12 key\r\n\t * @attribute F12\r\n\t * @type {Number}\r\n\t */\r\n\tkeyboard.F12 = 123;\r\n\r\n\treturn skylark.attach(\"devices.keyboard\",keyboard);\t\r\n});\ndefine('skylark-devices-keyboard/Key',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./keyboard\"\r\n],function(klass,keyboard){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Key is used by Keyboard, Mouse, etc, to represent a key state.\r\n\t *\r\n\t * @class Key\r\n\t * @module Input\r\n\t*/\r\n\tvar Key = klass({\r\n\t\t_construct : function() {\r\n\t\t\t/**\r\n\t\t\t * Indicates if this key is currently pressed.\r\n\t\t\t * @property pressed\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tthis.pressed = false;\r\n\r\n\t\t\t/**\r\n\t\t\t * Indicates if this key was just pressed.\r\n\t\t\t * @property justPressed\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tthis.justPressed = false;\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Indicates if this key was just released.\r\n\t\t\t * @property justReleased\r\n\t\t\t * @default false\r\n\t\t\t * @type {boolean}\r\n\t\t\t */\r\n\t\t\tthis.justReleased = false;\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update Key status based on new key state.\r\n\t\t * \r\n\t\t * @method update\r\n\t\t */\r\n\t\tupdate : function(action)  {\r\n\t\t\tthis.justPressed = false;\r\n\t\t\tthis.justReleased = false;\r\n\r\n\t\t\tif(action === Key.DOWN)\r\n\t\t\t{\r\n\t\t\t\tif(this.pressed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.justPressed = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis.pressed = true;\r\n\t\t\t}\r\n\t\t\telse if(action === Key.UP)\r\n\t\t\t{\r\n\t\t\t\tif(this.pressed)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.justReleased = true;\r\n\t\t\t\t}\r\n\t\t\t\tthis.pressed = false;\r\n\t\t\t}\r\n\t\t\telse if(action === Key.RESET)\r\n\t\t\t{\r\n\t\t\t\tthis.justReleased = false;\r\n\t\t\t\tthis.justPressed = false;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Set this key attributes manually.\r\n\t\t * \r\n\t\t * @method set\r\n\t\t */\r\n\t\tset : function(justPressed, pressed, justReleased){\r\n\t\t\tthis.justPressed = justPressed;\r\n\t\t\tthis.pressed = pressed;\r\n\t\t\tthis.justReleased = justReleased;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reset key to default values.\r\n\t\t * \r\n\t\t * @method reset\r\n\t\t*/\r\n\t\treset : function() \t{\r\n\t\t\tthis.justPressed = false;\r\n\t\t\tthis.pressed = false;\r\n\t\t\tthis.justReleased = false;\r\n\t\t}\r\n\t});\r\n\r\n\t/**\r\n\t * Down\r\n\t * @attribute DOWN\r\n\t * @type {Number}\r\n\t */\r\n\tKey.DOWN = -1;\r\n\r\n\t/**\r\n\t * Up\r\n\t * @attribute UP\r\n\t * @type {Number}\r\n\t */\r\n\tKey.UP = 1;\r\n\r\n\t/**\r\n\t * Reset\r\n\t * @attribute RESET\r\n\t * @type {Number}\r\n\t */\r\n\tKey.RESET = 0;\r\n\r\n\r\n\treturn keyboard.Key = Key;\r\n\r\n});\ndefine('skylark-devices-keyboard/Monitor',[\r\n\t\"skylark-langx-klass\",\r\n\t\"./keyboard\",\r\n\t\"./Key\"\r\n],function(\r\n\tklass,\r\n\tkeyboard,\r\n\tKey\r\n){\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Keyboard instance for input in sync with the running 3D application.\r\n\t * \r\n\t * The keyboard object provided by scripts is automatically updated by the runtime handler.\r\n\t * \r\n\t * @class Keyboard\r\n\t * @module Input\r\n\t * @param {Boolean} dontInitialize If true the mouse events are not created.\r\n\t */\r\n\tvar Monitor = klass({\r\n\t\t_construct : function (dontInitialize) \t{\r\n\t\t\t/**\r\n\t\t\t * Array with keyboard keys status.\r\n\t\t\t *\r\n\t\t\t * @property keys\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.keys = [];\r\n\r\n\r\n\t\t\t/**\r\n\t\t\t * The actions array serves as a buffer for the key input actions.\r\n\t\t\t *\r\n\t\t\t * Until the update method is called it stores all the key stroke actions.\r\n\t\t\t *\r\n\t\t\t * On update the key strokes are updated and the keys array stores the correct values.\r\n\t\t\t *\r\n\t\t\t * @property actions\r\n\t\t\t * @type {Array}\r\n\t\t\t */\r\n\t\t\tthis.actions = [];\r\n\r\n\t\t\tvar self = this;\r\n\t\t\tvar actions = this.actions;\r\n\r\n\t\t\t/**\r\n\t\t\t * Event manager used to handle the keyup, keydown and focus events.\r\n\t\t\t *\r\n\t\t\t * On each event actions are added to the actions array.\r\n\t\t\t *\r\n\t\t\t * @property events\r\n\t\t\t * @type {EventManager}\r\n\t\t\t */\r\n\t\t\t//this.events = new EventManager();\r\n\t\t\t/*\r\n\t\t\tthis.events.add(window, \"keydown\", function(event)\r\n\t\t\t{\r\n\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\tactions.push(Key.DOWN);\r\n\t\t\t});\r\n\t\t\tthis.events.add(window, \"keyup\", function(event)\r\n\t\t\t{\r\n\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\tactions.push(Key.UP);\r\n\t\t\t});\r\n\t\t\tthis.events.add(window, \"focus\", function(event)\r\n\t\t\t{\r\n\t\t\t\tself.reset();\r\n\t\t\t});\r\n\t\t\t*/\r\n\t\t\tthis.handlers = {\r\n\t\t\t\t\"keydown\" : function(event) {\r\n\t\t\t\t\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\t\t\t\t\tactions.push(Key.DOWN);\r\n\t\t\t\t\t\t\t},\t\t\t\r\n\t\t\t\t\"keyup\" : function(event) {\r\n\t\t\t\t\t\t\t\tactions.push(event.keyCode);\r\n\t\t\t\t\t\t\t\tactions.push(Key.UP);\r\n\t\t\t\t\t\t\t},\t\t\t\r\n\t\t\t\t\"focus\" : function(event) {\r\n\t\t\t\t\t\t\t\tself.reset();\r\n\t\t\t\t\t\t\t},\t\t\t\r\n\r\n\r\n\t\t\t};\r\n\r\n\t\t\tif(dontInitialize !== true)\r\n\t\t\t{\r\n\t\t\t\tthis.create();\r\n\t\t\t}\r\n\r\n\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Update key flags synchronously.\r\n\t\t * \r\n\t\t * @method update\r\n\t\t */\r\n\t\tupdate : function() \t{\r\n\t\t\tvar end = 0;\r\n\r\n\t\t\twhile(this.actions.length > end)\r\n\t\t\t{\r\n\t\t\t\tvar key = this.actions.shift();\r\n\t\t\t\tvar action = this.actions.shift();\r\n\r\n\t\t\t\tif(this.keys[key] === undefined)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.keys[key] = new Key();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.keys[key].update(action);\r\n\r\n\t\t\t\tif(this.keys[key].justReleased || this.keys[key].justPressed)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.actions.push(key);\r\n\t\t\t\t\tthis.actions.push(Key.RESET);\r\n\t\t\t\t\tend += 2;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Reset keyboard status to default.\r\n\t\t *\r\n\t\t * Does not clean the action list.\r\n\t\t * \r\n\t\t * @method reset\r\n\t\t */\r\n\t\treset : function() {\r\n\t\t\t//Reset all keys\r\n\t\t\tfor(var i = 0; i < this.keys.length; i++)\r\n\t\t\t{\r\n\t\t\t\tif(this.keys[i] !== undefined)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.keys[i].reset();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if a key is pressed.\r\n\t\t * \r\n\t\t * @method keyPressed\r\n\t\t * @return {boolean} True is the key is currently pressed\r\n\t\t */\r\n\t\tkeyPressed : function(key){\r\n\t\t\treturn this.keys[key] !== undefined && this.keys[key].pressed;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check is a key as just pressed.\r\n\t\t * \r\n\t\t * @method keyJustPressed\r\n\t\t * @return {boolean} True is the key was just pressed\r\n\t\t */\r\n\t\tkeyJustPressed : function(key){\r\n\t\t\treturn this.keys[key] !== undefined && this.keys[key].justPressed;\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Check if a key was just released.\r\n\t\t * \r\n\t\t * @method keyJustReleased\r\n\t\t * @return {boolean} True is the key was just pressed\r\n\t\t */\r\n\t\tkeyJustReleased : function(key){\r\n\t\t\treturn this.keys[key] !== undefined && this.keys[key].justReleased;\r\n\t\t},\r\n\r\n\r\n\t\t/**\r\n\t\t * Create keyboard events.\r\n\t\t * \r\n\t\t * @method dispose\r\n\t\t */\r\n\t\tcreate : function(){\r\n\t\t\t//this.events.create();\r\n\t\t\tfor (var event in this.handlers) {\r\n\t\t\t\twindow.addEventListener(event,this.handlers[event]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t/**\r\n\t\t * Dispose keyboard events.\r\n\t\t * \r\n\t\t * @method dispose\r\n\t\t */\r\n\t\tdispose : function()\t{\r\n\t\t\t//this.events.destroy();\r\n\t\t\tfor (var event in this.handlers) {\r\n\t\t\t\twindow.removeEventListener(event,this.handlers[event]);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t});\r\n\r\n\r\n\treturn keyboard.Monitor =  Monitor;\r\n});\ndefine('skylark-devices-keyboard/main',[\r\n\t\"./keyboard\",\r\n\t\"./Key\",\r\n\t\"./Monitor\"\r\n],function(keyboard){\r\n\treturn keyboard;\r\n});\ndefine('skylark-devices-keyboard', ['skylark-devices-keyboard/main'], function (main) { return main; });\n\n"]}